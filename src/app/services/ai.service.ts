import axios from 'axios';
import { StoryChapter } from '../models/story-chapter';
import { Injectable } from '@angular/core';
import { environment } from '../../environments/environment';
import { ImageService } from './image.service';


@Injectable({
  providedIn: 'root',
})
export class AIService {

    private maxTokensPerRequest: number = 4096;

    constructor(private imageService: ImageService) { }
    
    async *generateStoryStream(
      mainCategory: string,
      subCategory: string,
      topic: string,
      lix: number,
      numberOfChapters: number,
      imagesPerChapter: number
  ): AsyncGenerator<StoryChapter | { description: string; image: string }, void, unknown> {
  
      let conversationHistory: any[] = [];
      let previousChapterSummary = "";
  
      // Initialiserer med `system` prompten - kun √©n gang!
      const systemPrompt = `
          Du er en historiegenerator, som skal generere en sammenh√¶ngende, faktuel historie opdelt i flere kapitler.
          Alt tekst skal v√¶re p√• dansk.
          Historien skal v√¶re 100% baseret p√• verificerbare fakta og skrives med et gennemsnitligt LIX-tal p√• ${lix}.
          Historien skal opdeles i ${numberOfChapters} kapitler og f√∏lge en logisk tidslinje.
          Hvert kapitel skal have en klar titel, en r√¶kke afsnit (tekster) og en billeds√∏gning relateret til indholdet.
          Hvert kapitel skal v√¶re p√• mellem 500 og 1000 ord. Brug flere afsnit til at organisere teksten.
          Historien skal begynde med en introduktion og slutte med en konklusion.
          S√∏rg for, at kapitlerne h√¶nger sammen og d√¶kker hele emnet.
      `;
  
      // Tilf√∏jer `system` prompten til samtalehistorikken
      conversationHistory.push({ role: "system", content: systemPrompt });
  
      for (let chapterIndex = 1; chapterIndex <= numberOfChapters; chapterIndex++) {
          const userPrompt = `
              Gener√©r kapitel ${chapterIndex} ud af ${numberOfChapters} baseret p√• f√∏lgende input:
  
              Kategori: ${mainCategory}
              Underkategori: ${subCategory}
              Emne: ${topic}
  
              Resume af tidligere kapitler (hvis nogen): ${previousChapterSummary}
  
              S√∏rg for, at kapitlet f√∏lger den etablerede tidslinje og bidrager til historiens sammenh√¶ng.
  
              Udnyt det maksimale antal tokens **(${this.maxTokensPerRequest})** til at generere s√• meget tekst som muligt.
              
              Output skal v√¶re i f√∏lgende JSON-format:
  
              {
                  "title": "Kapitel ${chapterIndex}: Titel",
                  "texts": ["Afsnit 1", "Afsnit 2", "Afsnit 3", ...],
                  "imageQuery": "Kort og pr√¶cis s√∏gestreng p√• engelsk, baseret p√• indholdet per kapitel"
              }
          `;
  
          conversationHistory.push({ role: "user", content: userPrompt });
  
          try {
              const response = await axios.post('https://api.openai.com/v1/chat/completions', {
                  model: "gpt-4-turbo",
                  messages: conversationHistory,
                  temperature: 0.7,
                  max_tokens: this.maxTokensPerRequest
              }, {
                  headers: {
                      'Authorization': `Bearer ${environment.openAIConfig.apiKey}`,
                      'Content-Type': 'application/json'
                  }
              });
  
              const chapterContent = response.data.choices[0].message.content;
  
              // Fors√∏g p√• at parse det genererede kapitel
              let parsedChapter: StoryChapter;
              try {
                  parsedChapter = JSON.parse(chapterContent);
              } catch (parseError) {
                  console.error("Fejl ved parsing af AI-svar, fors√∏ger at f√• l√¶ngere tekst...");
                  continue;
              }
  
              // Henter billeder fra din imageService
              let images = await this.imageService.fetchImages(`${parsedChapter.imageQuery}`, imagesPerChapter);
              parsedChapter.images = images;

              // Opdaterer resume til n√¶ste kapitel prompt
              previousChapterSummary = `${parsedChapter.title}: ${parsedChapter.texts.slice(0, 2).join(" ")}`;
  
              // Tilf√∏jer AI's svar til samtalehistorikken
              conversationHistory.push({ role: "assistant", content: chapterContent });
  
              console.log(`Kapitel ${chapterIndex} genereret.`);
  
              // Yielder kapitlet til frontend (eller hvor det skal bruges)
              yield parsedChapter;
  
          } catch (error) {
              console.error(`Fejl ved generering af kapitel ${chapterIndex}:`, error);
              break;
          }
      }
  
      const summary = await this.generateStorySummary(conversationHistory);
  
      const coverImages = await this.imageService.fetchImages(`${topic} profile picture`, 5);
      const coverImage = coverImages.find(img => img.startsWith("data:image")) || "";

      yield { description: summary, image: coverImage };
  }
  
    private async generateStorySummary(conversationHistory: any[]): Promise<string> {
        const prompt = `
            Du skal lave en kort opsummering af en l√¶ngere historie baseret p√• f√∏lgende samtalehistorik:

            ${conversationHistory
                .filter(msg => msg.role === "assistant")
                .map((msg, index) => `Kapitel ${index + 1}: ${msg.content}`)
                .join("\n")}

            Opsummer hele historien i √©n s√¶tning p√• max 20 ord, som kan vises p√• forsiden af en bog.
        `;

        try {
            const response = await axios.post('https://api.openai.com/v1/chat/completions', {
                model: "gpt-4-turbo",
                messages: [{ role: "user", content: prompt }],
                temperature: 0.7
            }, {
                headers: {
                    'Authorization': `Bearer ${environment.openAIConfig.apiKey}`,
                    'Content-Type': 'application/json'
                }
            });

            const summary = response.data.choices[0].message.content.trim();
            console.log(`Opsummering genereret: ${summary}`);
            return summary;

        } catch (error) {
            console.error('Fejl ved generering af opsummering:', error);
            return "Fejl i generering af opsummering.";
        }
    }
}






// import { Injectable } from '@angular/core';
// import axios from 'axios';
// import { environment } from '../../environments/environment';
// import { StoryChapter } from '../models/story-chapter';
// import { ImageService } from './image.service';

// @Injectable({
//   providedIn: 'root',
// })
// export class AIService {
//   totalChapters: number = 10;
//   maxTokensPerRequest: number = 4096; // Maksimale tokens pr. kald = 4096
//   imagesPerChapter: number = 10;

//   constructor(private imageService: ImageService) {}

//   async *generateStoryStream(
//     mainCategory: string,
//     subCategory: string,
//     topic: string,
//     lix: number
//   ): AsyncGenerator<StoryChapter | { description: string; image: string }, void, unknown> {
  
//     let lixDescription = this.getLixDescription(lix);
//     let storySoFar = "";
//     let nextChapterHint = ""; // Hint til n√¶ste kapitel

//     for (let i = 1; i <= this.totalChapters; i++) {
//       let roleInstructions = this.getRoleInstructions(i, this.totalChapters);

//       console.log(`üîπ Genererer kapitel ${i} med maksimale tokens: ${this.maxTokensPerRequest}`);

//       const response = await axios.post(
//         environment.openAIConfig.apiUrl,
//         {
//           model: 'gpt-4-turbo',
//           messages: [
//             {
//               role: 'system',
//               content: `
//                 Du skriver letl√¶selige 100% faktuelle historier p√• dansk med en LIX-score p√• ${lix}.
//                 ${lixDescription}
//                 Historien skal v√¶re sammenh√¶ngende og bygge videre fra kapitel til kapitel og v√¶re letl√¶selig i forhold til lix-scoren.
                
//                 üîπ **Output-krav**:
//                 1. Return√©r en gyldig JSON-struktur:
//                    {
//                      "title": "Kapitel X: Titel",
//                      "texts": ["Afsnit 1", "Afsnit 2"],
//                     "imageQuery": "Optimized Google Image Search Query in English"
//                   }
//                 2. **For "imageQuery"**:
//                   - Lav en **kort og pr√¶cis s√∏gestreng** p√• **engelsk**.
//                   - Bas√©r den p√• **de vigtigste n√∏gleord fra kapitlets indhold**.
//                   - **Undg√• lange s√¶tninger** ‚Äì brug 1-3 relevante s√∏geord adskilt af mellemrum.
//                   - Hvis kapitlet beskriver en person, begivenhed eller sted, inklud√©r det.
//                   - **Eksempler**:
//                     - "Albert Einstein physics theory"
//                     - "Vikings longships battle"
//                     - "Ancient Rome Colosseum gladiators"
//                   - **Undg√•** at bruge generiske ord som "image" eller "picture".
//                 3. **Ingen ekstra tekst udenfor JSON-objektet**.
//                 4. Udnyt det maksimale antal tokens **(${this.maxTokensPerRequest})** til at generere s√• meget tekst som muligt.
//               `
//             },
//             {
//               role: 'user',
//               content: `
//                 Gener√©r **kapitel ${i}** af en faktuel historie om **${topic}**${mainCategory !== 'other' ? ` inden for **${subCategory}** i **${mainCategory}**` : ''}.
//                 Historien skal v√¶re sammenh√¶ngende og forts√¶tte fra tidligere kapitler.
            
//                 ${i > 1 ? `üîπ **Resum√© af historien indtil nu:**\n\`\`\`json\n${JSON.stringify(storySoFar)}\n\`\`\`` : ''} 
                
//                 - ${roleInstructions}
//                 - **S√∏rg for at afslutte alle l√∏se tr√•de i kapitlet eller introducere dem igen i senere kapitler.**
//                 - **Hvis en stor begivenhed n√¶vnes, skal den udfolde sig i de f√∏lgende kapitler.**
//                 - **Overhold denne anvisning til n√¶ste kapitel: ${nextChapterHint}**
//                 - **Brug maksimale tokens for at generere s√• meget indhold som muligt.**
//                 - Return√©r **kun** valid JSON som beskrevet.
//               `.trim()
//             }
//           ],
//           max_tokens: this.maxTokensPerRequest
//         },
//         {
//           headers: { Authorization: `Bearer ${environment.openAIConfig.apiKey}`, 'Content-Type': 'application/json' }
//         }
//       );

//       let jsonResponse = response.data.choices[0].message.content.trim();
//       let newChapter: StoryChapter;

//       try {
//         newChapter = JSON.parse(jsonResponse) as StoryChapter;
//       } catch (error) {
//         console.error("Fejl ved parsing af JSON:", error);
//         console.error("Modtaget output:", jsonResponse);
//         throw new Error("Fejl i AI-output, kunne ikke parse JSON.");
//       }

//       if (!newChapter.title || !newChapter.texts || !newChapter.imageQuery) {
//         console.error("Fejl: AI-output mangler felter", newChapter);
//         throw new Error("AI-returneret JSON mangler n√∏dvendige felter.");
//       }

//       let images = await this.imageService.fetchImages(`${newChapter.imageQuery}`, this.imagesPerChapter);
//       newChapter.images = images;

//       storySoFar += `\nKapitel ${i}: ${newChapter.title}\n${newChapter.texts.join(" ")}\n`;

//       // üîπ Gener√©r hint til n√¶ste kapitel
//       nextChapterHint = await this.getNextChapterHint(storySoFar);

//       yield newChapter; // Yield each chapter in the stream

//       await new Promise((resolve) => setTimeout(resolve, 1000));
//     }

//     // üîπ Generate metadata after all chapters have been created
//     const metadata = await this.generateStoryMetadata(topic, storySoFar, lix);
//     const coverImages = await this.imageService.fetchImages(`${topic} profile picture`, 5);
//     const coverImage = coverImages.find(img => img.startsWith("data:image")) || "";

//     yield {
//       description: metadata.description,
//       image: coverImage
//     };
//   }

//   private getLixDescription(lix: number): string {
//     if (lix <= 5) {
//       return "Brug korte s√¶tninger, enkle ord og mange punktummer.";
//     } else if (lix <= 15) {
//       return "Brug korte s√¶tninger, men introduc√©r enkelte l√¶ngere ord.";
//     } else if (lix <= 25) {
//       return "Brug mellemlange s√¶tninger og flere faglige ord.";
//     } else if (lix <= 35) {
//       return "Brug l√¶ngere s√¶tninger, sammensatte ord og komplekse begreber.";
//     } else {
//       return "Brug komplekse s√¶tninger, akademiske begreber og avanceret terminologi.";
//     }
//   }

//   // üîπ Funktion til at generere n√¶ste kapitelhint
//   private async getNextChapterHint(storySoFar: string): Promise<string> {
//     try {
//       const response = await axios.post(
//         environment.openAIConfig.apiUrl,
//         {
//           model: 'gpt-4-turbo',
//           messages: [
//             {
//               role: 'system',
//               content: `
//                 Ud fra den eksisterende historie, lav en kort beskrivelse (maks 2 s√¶tninger) af, hvad n√¶ste kapitel b√∏r handle om, for at sikre en sammenh√¶ngende fort√¶lling.
//                 Return√©r kun en kort beskrivelse.
//               `
//             },
//             {
//               role: 'user',
//               content: `
//                 Historie indtil nu:
//                 ${storySoFar.substring(0, 5000)}

//                 Hvad b√∏r n√¶ste kapitel d√¶kke?
//               `.trim()
//             }
//           ],
//           max_tokens: 100
//         },
//         {
//           headers: { Authorization: `Bearer ${environment.openAIConfig.apiKey}`, 'Content-Type': 'application/json' }
//         }
//       );

//       return response.data.choices[0].message.content.trim();
//     } catch (error) {
//       console.error("Fejl ved generering af nextChapterHint:", error);
//       return "";
//     }
//   }

//   async generateStoryMetadata(storyTitle: string, storySoFar: string, lix: number): Promise<{ description: string; }> {
//     if (!storySoFar.trim()) {
//       throw new Error("Historien er tom, kan ikke generere metadata.");
//     }
  
//     let lixDescription = this.getLixDescription(lix);
  
//     const response = await axios.post(
//       environment.openAIConfig.apiUrl,
//       {
//         model: 'gpt-4-turbo',
//         messages: [
//           {
//             role: 'system',
//             content: `
//               Du er en assistent, der skal generere en **meget kort og pr√¶cis bogbeskrivelse** p√• dansk.
//               - Den skal have en **LIX-score p√• ${lix}**.
//               - ${lixDescription}
//               - **Return√©r kun JSON**.
//               - **Formatkrav**:
//                 {
//                   "description": "En kort bogbeskrivelse"
//                 }
//               - **Ingen billeder, ingen ekstra forklaringer.**
//             `
//           },
//           {
//             role: 'user',
//             content: `
//               Gener√©r en **kort bogbeskrivelse** for en bog med titlen **"${storyTitle}"**.
  
//               üîπ **Beskrivelse skal v√¶re p√• maks 20 ord.**
//               üîπ Brug kun **valid JSON**.
//               üîπ **Undg√• "book_description" eller "image_description" ‚Äì return√©r kun et JSON-objekt med "description".**
              
//               Historieindhold:
//               ${storySoFar.substring(0, 5000)}
  
//               Husk: Return√©r **kun** JSON-objektet uden ekstra forklaringer.
//             `.trim()
//           }
//         ],
//         max_tokens: 150
//       },
//       {
//         headers: { Authorization: `Bearer ${environment.openAIConfig.apiKey}`, 'Content-Type': 'application/json' }
//       }
//     );
  
//     const jsonResponse = response.data.choices[0].message.content.trim();
  
//     // üîπ Validate JSON format before parsing
//     if (!jsonResponse.startsWith("{") || !jsonResponse.endsWith("}")) {
//       console.error("‚ùå AI response is not valid JSON:", jsonResponse);
//       throw new Error("Fejl i AI-output: Modtaget data er ikke valid JSON.");
//     }
  
//     try {
//       const metadata = JSON.parse(jsonResponse);
      
//       if (!metadata.description) {
//         throw new Error("‚ùå AI mangler 'description' feltet i metadata.");
//       }
  
//       return metadata;
//     } catch (error) {
//       console.error("‚ùå Fejl ved parsing af AI-metadata:", error, "Modtaget output:", jsonResponse);
//       throw new Error("Fejl i AI-output, kunne ikke parse JSON.");
//     }
//   }
  
//   private getRoleInstructions(i: number, chapterCount: number): string {
//     if (i === 1) {
//       return `
//         **Kapitel 1: Begyndelsen af historien**
//         - Introduc√©r emnet p√• en engagerende m√•de, og skab en r√∏d tr√•d.
//         - Giv n√∏dvendig baggrundsinformation for at s√¶tte scenen.
//         - Start tidslinjen, hvis relevant, ved at beskrive den f√∏rste begivenhed i en naturlig fort√¶llestil.
//         - Lad l√¶seren forst√• historiens forl√∏b uden at det bliver en ren opremsning.
//         - Afslut kapitlet med en tydelig overgang til n√¶ste begivenhed eller periode.
//       `;
//     } else if (i === chapterCount) {
//       return `
//         **Kapitel ${i}: Afslutningen af historien**
//         - Byg videre p√• de tidligere kapitler og knyt de vigtigste tr√•de sammen.
//         - Beskriv de seneste begivenheder p√• tidslinjen og deres konsekvenser.
//         - Giv en afrunding, der s√¶tter historien i perspektiv.
//         - S√∏rg for en st√¶rk afslutning, hvor tidslinjen f√∏les fuldendt.
//       `;
//     } else {
//       return `
//         **Kapitel ${i}: Videre i fort√¶llingen**
//         - Tag udgangspunkt i den foreg√•ende begivenhed og f√∏r tidslinjen videre.
//         - Uddyb med detaljer, eksempler og sammenh√¶nge, s√• progressionen f√∏les naturlig.
//         - Introduc√©r nye n√∏glepunkter i fort√¶llingen, som skubber handlingen fremad.
//         - Hvis historien sp√¶nder over en l√¶ngere periode, g√∏r overgangen mellem tidspunkter flydende.
//         - Skab en naturlig overgang til n√¶ste kapitel, s√• l√¶seren fastholdes i fort√¶llingen.
//       `;
//     }
//   }  
// }
